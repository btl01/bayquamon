datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Section {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  Item        String?
  items       Item[]
  type        Int?
  media       String?
  description String?
  keyword     String?
  url         String?
  data        String?
  assets      String?
  cloud       String?
  icon        String?
  background  String?
}

type Option {
  value       String
  type        Int?
  media       String?
  description String?
  keyword     String?
  url         String?
  data        String?
  assets      String?
  cloud       String?
  icon        String?
  background  String?
}

model Item {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  value       String
  section     Section  @relation(fields: [sectionId], references: [id])
  sectionId   String   @db.ObjectId
  options     Option[]
  type        Int?
  media       String?
  description String?
  keyword     String?
  url         String?
  data        String?
  assets      String?
  cloud       String?
  icon        String?
  background  String?
}

model Post {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String?
  description   String?
  audio         String[]
  images        String[]
  videos        String[]
  options       Option[]
  author        User         @relation(fields: [authorId], references: [id])
  authorId      String       @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  learnLevels   LearnLevel[]
  reactions     Reaction[]
  comments      Comment[]
  tagIDs        String[]     @db.ObjectId
  tags          Tag[]        @relation(fields: [tagIDs], references: [id])
  collectionIDs String[]     @db.ObjectId
  collections   Collection[] @relation(fields: [collectionIDs], references: [id])
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  email         String?
  uid           String       @unique
  displayName   String
  photoURL      String?
  introduction  String?
  posts         Post[]
  reactions     Reaction[]
  comments      Comment[]
  learnLevels   LearnLevel[]
  collections   Collection[]
  followedBy    User[]       @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs String[]     @db.ObjectId
  following     User[]       @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs  String[]     @db.ObjectId
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

model Reaction {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  post      Post         @relation(fields: [postId], references: [id])
  postId    String       @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @db.ObjectId
  type      ReactionType
  icon      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  analytics Analytics[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearnLevel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  post        Post     @relation(fields: [postId], references: [id])
  postId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  description String
  icon        String
  level       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  description String
  postIDs     String[]    @db.ObjectId
  posts       Post[]      @relation(fields: [postIDs], references: [id])
  analytics   Analytics[]
}

model Analytics {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String   @db.ObjectId
  reaction   Reaction @relation(fields: [reactionId], references: [id])
  reactionId String   @db.ObjectId
  count      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Collection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("userId") @db.ObjectId
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  postIDs     String[] @db.ObjectId
  posts       Post[]   @relation(fields: [postIDs], references: [id])
}
