datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "fullTextIndex", "fullTextSearch"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Section {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  Item        String?
  items       Item[]
  type        Int?
  media       String?
  description String?
  keyword     String?
  url         String?
  data        String?
  assets      String?
  cloud       String?
  icon        String?
  background  String?
}

type Option {
  value       String
  type        Int?
  media       String?
  description String?
  keyword     String?
  url         String?
  data        String?
  assets      String?
  cloud       String?
  icon        String?
  background  String?
}

model Item {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  value       String
  section     Section  @relation(fields: [sectionId], references: [id])
  sectionId   String   @db.ObjectId
  options     Option[]
  type        Int?
  media       String?
  description String?
  keyword     String?
  url         String?
  data        String?
  assets      String?
  cloud       String?
  icon        String?
  background  String?
}

model Post {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String?
  description   String?
  audios        String[]
  images        String[]
  videos        String[]
  options       Option[]
  author        User         @relation(fields: [authorId], references: [id])
  authorId      String       @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  learnLevels   LearnLevel[]
  reactions     Reaction[]
  comments      Comment[]
  tagIDs        String[]     @db.ObjectId
  tags          Tag[]        @relation(fields: [tagIDs], references: [id])
  collectionIDs String[]     @db.ObjectId
  collections   Collection[] @relation(fields: [collectionIDs], references: [id])
  Report        Report[]

  @@fulltext([title])
}

enum Locale {
  en
  vi
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  email             String?
  uid               String             @unique
  displayName       String
  photoURL          String?
  introduction      String?
  locale            Locale?
  posts             Post[]
  reactions         Reaction[]
  comments          Comment[]
  learnLevels       LearnLevel[]
  collections       Collection[]
  followedBy        User[]             @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs     String[]           @db.ObjectId
  following         User[]             @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs      String[]           @db.ObjectId
  hiddenPostIDs     String[]           @db.ObjectId
  pushSubscriptions PushSubscription[]
  Plan              Plan[]
  inboxs            Inbox[]            @relation(fields: [inboxIDs], references: [id])
  inboxIDs          String[]           @db.ObjectId
  messages          Message[]
  Report            Report[]

  @@fulltext([displayName, email])
}

type PushSubscription {
  endpoint       String
  expirationTime BigInt?
  keys           Keys
}

type Keys {
  p256dh String
  auth   String
}

model Reaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearnLevel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  level     Int
  repeating Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  postIDs     String[] @db.ObjectId
  posts       Post[]   @relation(fields: [postIDs], references: [id])
}

model Collection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("userId") @db.ObjectId
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  postIDs     String[] @db.ObjectId
  posts       Post[]   @relation(fields: [postIDs], references: [id])
}

model Plan {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("userId") @db.ObjectId
  description String
  priority    Int       @default(0)
  due         DateTime?
  status      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Report {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inbox {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  participants   User[]    @relation(fields: [participantIDS], references: [id])
  participantIDS String[]  @db.ObjectId
  messages       Message[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  inbox     Inbox?   @relation(fields: [inboxId], references: [id])
  inboxId   String?  @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id])
  content   String
  senderId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
